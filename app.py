import streamlit as st
from report_generator import generate_report
from docx_builder import build_docx
from config import DEFAULT_COLLEGE, DEFAULT_DEPARTMENT, THEMES
import tempfile
import os

st.set_page_config(page_title="Event Report Generator", page_icon="üìÑ")

# Initialize session state
if 'report_generated' not in st.session_state:
    st.session_state.report_generated = False
if 'report_text' not in st.session_state:
    st.session_state.report_text = ""
if 'event_details' not in st.session_state:
    st.session_state.event_details = {}
if 'image_paths' not in st.session_state:
    st.session_state.image_paths = []
if 'output_filename' not in st.session_state:
    st.session_state.output_filename = ""
if 'docx_data' not in st.session_state:
    st.session_state.docx_data = None

st.markdown("<h1 style='text-align: center; color: #4B8BBE;'>üìÑ AI-Powered Event Report Generator</h1>", unsafe_allow_html=True)
st.markdown("<div style='text-align: center; color: #666;'>‚ú® <strong>Minimal Input, Maximum Output</strong> - Professional reports generated by AI in seconds!</div>", unsafe_allow_html=True)
st.markdown("---")

# Add helpful tips
with st.expander("üí° Tips for Perfect Reports"):
    st.markdown("""
    **For Best Results:**
    - ‚úÖ **Event Title** and **Date** are mandatory
    - ‚úÖ Add **Speaker details** for credibility 
    - ‚úÖ Mention **key topics** - AI will expand them appropriately
    - ‚úÖ **Brief description** helps AI understand the event context
    - ‚úÖ Choose **"Concise & Realistic"** for genuine, professional reports
    - ‚úÖ Use **Academic Blue** theme for most professional formatting
    - ‚úÖ **Photos are optional** - if no photos uploaded, the photo section is automatically omitted
    
    **Report Styles:**
    - üìù **Concise & Realistic:** Natural language, focused content, authentic feel
    - üìö **Detailed & Comprehensive:** Academic language, elaborate sections, formal tone
    """)

st.markdown("")

# Collect event input in a form
if not st.session_state.report_generated:
    st.info("üéØ **Quick Report Generation** - Fill only the essential details, AI will create a comprehensive report!")
    
    with st.form("event_form"):
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("### üìã **Basic Information**")
            college_name = st.text_input("College Name", DEFAULT_COLLEGE)
            dept_name = st.text_input("Department/Cell", DEFAULT_DEPARTMENT)
            event_title = st.text_input("Event/Workshop Title *", placeholder="e.g., Cloud Computing Workshop")
            event_type = st.selectbox("Event Type", ["Workshop", "Seminar", "Guest Lecture", "Conference", "Hackathon", "Fest", "Competition", "Training Program", "Other"])
            date = st.text_input("Event Date *", placeholder="e.g., 5 October 2025")
            venue = st.text_input("Venue", placeholder="e.g., CSE Seminar Hall")
            
        with col2:
            st.markdown("### üë• **Key Details**")
            organizer = st.text_input("Organizer/Club", placeholder="e.g., AI/ML Student Club")
            speaker = st.text_input("Speaker(s)", placeholder="e.g., Dr. Priya Deshmukh, Cloud Architect, Microsoft")
            
            # Smart AI-powered fields with hints
            brief_description = st.text_area("Brief Event Description", 
                placeholder="Just 2-3 lines about what the event was about. AI will expand this into full sections.",
                height=100)
            
            key_topics = st.text_input("Key Topics Covered", 
                placeholder="e.g., Cloud fundamentals, AWS, Azure (AI will create detailed content)")
            
            attendance = st.number_input("Approximate Attendance", min_value=1, max_value=1000, value=50)
            
            # Optional advanced fields (collapsed by default)
            with st.expander("üîß Optional Details & Settings"):
                st.markdown("**Content Level:**")
                report_style = st.radio(
                    "Choose report style:",
                    ["Concise & Realistic", "Detailed & Comprehensive"],
                    index=0,
                    help="Concise = Focused, genuine content. Detailed = More elaborate academic language."
                )
                
                st.markdown("**Optional Details (AI will auto-generate if empty):**")
                objectives = st.text_area("Specific Objectives (optional)", placeholder="AI will generate based on event type")
                outcomes = st.text_area("Key Outcomes/Feedback (optional)", placeholder="AI will create realistic outcomes")
                quotes = st.text_area("Student Quotes (optional)", placeholder="AI will generate realistic feedback")
                participants = st.text_area("Key Participants/Contributors (optional)", placeholder="AI will create participant list")
            
            theme = st.selectbox("Report Theme", list(THEMES.keys()), index=1)  # Default to Academic Blue
            photos = st.file_uploader(
                "Add Event Photos (optional)", 
                accept_multiple_files=True, 
                type=["png", "jpg", "jpeg"],
                help="Photos will be included in the report with captions. If no photos uploaded, the photo section will be automatically omitted."
            )
            
        submit = st.form_submit_button("üöÄ Generate Professional Report", type="primary")

    # After form submit, generate AI summary
    if submit:
        if not event_title.strip():
            st.error("Please enter an event title!")
        elif not date.strip():
            st.error("Please enter the event date!")
        else:
            details = {
                "college_name": college_name,
                "dept_name": dept_name,
                "event_title": event_title,
                "event_type": event_type,
                "date": date,
                "venue": venue or "College Campus",
                "organizer": organizer or f"{dept_name} Department",
                "speaker": speaker or "Industry Expert",
                "objectives": objectives or "",
                "description": brief_description,
                "key_topics": key_topics or "",
                "attendance": attendance,
                "outcomes": outcomes or "",
                "quotes": quotes or "",
                "participants": participants or "",
                "report_style": report_style
            }
            
            # Store details in session state
            st.session_state.event_details = details
            st.session_state.selected_theme = theme
            st.session_state.output_filename = f"{event_title.replace(' ', '_').lower()}_report.docx"
            
            # Handle uploaded photos
            image_paths = []
            photos_available = "No"
            if photos:
                photos_available = "Yes"
                for uploaded_photo in photos:
                    temp_img_path = os.path.join("assets", uploaded_photo.name)
                    with open(temp_img_path, "wb") as f:
                        f.write(uploaded_photo.getbuffer())
                    image_paths.append(temp_img_path)
            st.session_state.image_paths = image_paths
            
            # Add photos availability to details for AI prompt
            details["photos_available"] = photos_available
            
            # Generate report
            st.info("ü§ñ AI is crafting your professional report...")
            try:
                report_text = generate_report(details)
                if not report_text or len(report_text) < 100:
                    st.error("‚ö†Ô∏è AI generated incomplete content. Please check your API key or try again.")
                    st.stop()
                    
                st.session_state.report_text = report_text
                st.session_state.report_generated = True
                st.success("‚úÖ Report generated successfully! You can now preview and edit it.")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Error generating report: {str(e)}")
                st.error("üí° **Troubleshooting Tips:**")
                st.error("- Check your internet connection")
                st.error("- Verify the API key in config.py")
                st.error("- Try again with simpler input text")

# Show the edit and download section if report is generated
else:
    st.success("üéâ **Report Generated Successfully!**")
    
    # Quick stats
    word_count = len(st.session_state.report_text.split())
    st.info(f"üìä **Report Statistics:** {word_count} words ‚Ä¢ Professional formatting ‚Ä¢ Ready for submission")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown("### üìù **Review and Edit Your Report**")
    with col2:
        # Show a button to go back to form
        if st.button("‚Üê Back to Form", type="secondary"):
            st.session_state.report_generated = False
            st.session_state.report_text = ""
            st.rerun()
    
    # Editable text area
    preview_text = st.text_area(
        "Edit Report Text Below if Needed", 
        st.session_state.report_text, 
        height=400,
        key="report_editor"
    )
    
    # Update session state when text is edited
    st.session_state.report_text = preview_text
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Generate and download button
        if st.button("üìÑ Generate Final DOCX", type="primary"):
            try:
                # Create temporary file path
                temp_docx_path = os.path.join(tempfile.gettempdir(), f"temp_{st.session_state.output_filename}")
                
                # Build doc using current edited preview text, theme, images
                build_docx(
                    st.session_state.event_details, 
                    st.session_state.report_text, 
                    temp_docx_path, 
                    theme=st.session_state.selected_theme, 
                    photos=st.session_state.image_paths
                )
                
                # Read the file and create download button
                with open(temp_docx_path, "rb") as f:
                    file_data = f.read()
                
                st.session_state.docx_data = file_data
                st.success("‚úÖ Document generated successfully! Click download below.")
                
                # Clean up temporary file
                try:
                    os.remove(temp_docx_path)
                except:
                    pass
                    
            except Exception as e:
                st.error(f"Error generating document: {str(e)}")
    
    with col2:
        # Download button (always visible if docx_data exists)
        if hasattr(st.session_state, 'docx_data') and st.session_state.docx_data:
            st.download_button(
                "üì• Download DOCX",
                data=st.session_state.docx_data,
                file_name=st.session_state.output_filename,
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                key="download_final_docx"
            )

st.markdown("---")
st.info("All event types, rich formatting, preview/edit, participant quotes, photos, and custom style!")
